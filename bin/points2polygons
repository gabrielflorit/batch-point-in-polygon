#!/usr/bin/env node

var fs = require('fs');
var optimist = require('optimist');
var numeral = require('numeral');
var util = require('util');
var points2polygons = require('../points2polygons.js');
var d3 = require('d3');
var csv2geojson = require('csv2geojson');
var _ = require('lodash');

var argv = optimist
	.usage('Batch point-in-polygon operations. Creates a GeoJSON file of polygons containing points.\nUsage: $0')
	.options('y', {
		demand: true,
		alias: 'polygons',
		describe: 'a GeoJSON file of polygons'
	})
	.options('t', {
		demand: true,
		alias: 'points',
		describe: 'a CSV file of points'
	})
	.options('i', {
		demand: false,
		alias: 'latitude',
		describe: 'latitude field',
		default: 'latitude'
	})
	.options('e', {
		demand: false,
		alias: 'longitude',
		describe: 'longitude field',
		default: 'longitude'
	})
	.options('d', {
		demand: false,
		alias: 'delimiter',
		describe: 'delimiter character',
		default: ','
	})
	.options('o', {
		demand: false,
		alias: 'output',
		default: 'output.json',
		describe: 'a GeoJSON file of polygons containing points'
	})
	.options('c', {
		demand: false,
		alias: 'countBy',
		default: null,
		describe: 'aggregate points by count - group by this field'
	})
	.options('g', {
		demand: false,
		alias: 'groupBy',
		default: null,
		describe: 'aggregate points by sum - group by this field'
	})
	.options('s', {
		demand: false,
		alias: 'sumBy',
		default: null,
		describe: 'aggregate points by sum - sum by this field'
	})
	.argv;

var polygonsFile = fs.readFileSync(argv.polygons, 'utf8');
var pointsFile = fs.readFileSync(argv.points, 'utf8');

var polygons = JSON.parse(polygonsFile);

var json = d3.csv.parse(pointsFile);

// check that lat and lon params are in key
var keys = _.keys(json[0]);
if (!_.contains(keys, argv.latitude)) {
	console.log('Please specify the correct latitude field.');
	process.exit(0);
}

if (!_.contains(keys, argv.longitude)) {
	console.log('Please specify the correct longitude field.');
	process.exit(0);
}

csv2geojson.csv2geojson(json, {
	latfield: argv.latitude,
	lonfield: argv.longitude,
	delimiter: argv.delimiter
}, function(err, points) {

	// tell pace how many elements we're going to process
	var pace = require('pace')({
		total: points.features.length,
		itemType: 'points'
	});

	function showProgress(elementsProcessed) {
		pace.op(elementsProcessed);
	}

	var results = points2polygons.batch(polygons, points, showProgress, argv.countBy, argv.groupBy, argv.sumBy);

	// create a new polygon GeoJSON file
	util.print('\nWriting to ' + argv.output + '...');
	fs.writeFileSync(argv.output, JSON.stringify(results.polygons, null, 4));
	util.print(' Done.\n');

	if (results.orphans.length) {

		// now make orphans.geojson
		var orphansJson = {
			type: 'FeatureCollection',
			features: results.orphans
		};

		var orphansFileName = 'orphans.geojson';

		util.print('There are ' + numeral(results.orphans.length).format('0, 0') + ' points with no polygons. Writing to ' + orphansFileName + '...');
		fs.writeFileSync(orphansFileName, JSON.stringify(orphansJson, null, 4));
		util.print(' Done.\n');

	}

});